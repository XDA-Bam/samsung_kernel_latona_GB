/*
 * OMAP4 SAR RAM hardware layout header file
 *
 * Copyright (C) 2010 Texas Instruments, Inc.
 * Written by Santosh Shilimkar <santosh.shilimkar@ti.com>
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2 as
 * published by the Free Software Foundation.
 */
#ifndef OMAP_ARCH_OMAP4_SAR_LAYOUT_H
#define OMAP_ARCH_OMAP4_SAR_LAYOUT_H

#include <mach/hardware.h>
#include <mach/omap4-common.h>
#include <mach/emif-44xx.h>
#include <mach/dmm-44xx.h>
#include <mach/ctrl_module_pad_core_44xx.h>

#include "cm44xx.h"
#include "prcm-common.h"

/*
 * The SAR RAM is maintained during Device OFF mode.
 * It is split into 4 banks with different privilege accesses
 *
 * ---------------------------------------------------------------------
 * Access mode			Bank	Address Range
 * ---------------------------------------------------------------------
 * HS/GP : Public		1	0x4A32_6000 - 0x4A32_6FFF (4kB)
 * HS/GP : Public, Secured
 * if padconfaccdisable=1	2	0x4A32_7000 - 0x4A32_73FF (1kB)
 * HS/EMU : Secured
 * GP : Public			3	0x4A32_8000 - 0x4A32_87FF (2kB)
 * HS/GP :
 * Secure Priviledge,
 * write once.			4	0x4A32_9000 - 0x4A32_93FF (1kB)
 * ---------------------------------------------------------------------
 * The SAR RAM save regiter layout is fixed since restore is done by hardware.
 */

#define NB_REGS_CONST_SETS_RAM1_HW		154
#define NB_REGS_CONST_SETS_RAM2_HW		1
#define NB_REGS_CONST_SETS_RAM3_HW		122
#define NB_REGS_CONST_SETS_RAM4_HW		13

#define MODULE_ADDR_IDX				0
#define MODULE_OFFSET_IDX			1
#define MODULE_NB_REGS_IDX			2
#define SAR_RAM_OFFSET_IDX			3

/*
 * Module Index used to lookup VA using index
 */
#define MAX_SAR_MODULES				14
#define EMIF1_INDEX				0
#define EMIF2_INDEX				1
#define DMM_INDEX				2
#define CM1_INDEX				3
#define CM2_INDEX				4
#define C2C_INDEX				5
#define CTRL_MODULE_PAD_CORE_INDEX		6
#define L3_CLK1_INDEX				7
#define L3_CLK2_INDEX				8
#define L3_CLK3_INDEX				9
#define USBTLL_INDEX				10
#define UHH_INDEX				11
#define L4CORE_INDEX				12
#define L4PER_INDEX				13

/*
 * SAR_RAM1 register layout consist of EMIF1, EMIF2, CM1, CM2,
 * CONTROL_CORE efuse, DMM and USB TLL registers.
 * The layout is arranged is a two dimentional array like
 * below,
 * const u32 sar_ramX_layout[nb_regs_sets][4] = {
 *	{module_index, reg_offset, size, sar_ram_offset},
 * }
 */
const u32 sar_ram1_layout[NB_REGS_CONST_SETS_RAM1_HW][4] = {
	{EMIF1_INDEX, OMAP44XX_EMIF_SDRAM_CONFIG, 1, 0x00000000},
	{EMIF1_INDEX, OMAP44XX_EMIF_SDRAM_CONFIG_2, 1, 0x00000004},
	{EMIF1_INDEX, OMAP44XX_EMIF_SDRAM_REF_CTRL, 1, 0x00000008},
	{EMIF1_INDEX, OMAP44XX_EMIF_SDRAM_REF_CTRL_SHDW, 1, 0x0000000C},
	{EMIF1_INDEX, OMAP44XX_EMIF_SDRAM_TIM_1, 1, 0x00000010},
	{EMIF1_INDEX, OMAP44XX_EMIF_SDRAM_TIM_1_SHDW, 1, 0x00000014},
	{EMIF1_INDEX, OMAP44XX_EMIF_SDRAM_TIM_2, 1, 0x00000018},
	{EMIF1_INDEX, OMAP44XX_EMIF_SDRAM_TIM_2_SHDW, 1, 0x0000001C},
	{EMIF1_INDEX, OMAP44XX_EMIF_SDRAM_TIM_3, 1, 0x00000020},
	{EMIF1_INDEX, OMAP44XX_EMIF_SDRAM_TIM_3_SHDW, 1, 0x00000024},
	{EMIF1_INDEX, OMAP44XX_EMIF_LPDDR2_NVM_TIM, 1, 0x00000028},
	{EMIF1_INDEX, OMAP44XX_EMIF_LPDDR2_NVM_TIM_SHDW, 1, 0x0000002C},
	{EMIF1_INDEX, OMAP44XX_EMIF_PWR_MGMT_CTRL, 1, 0x00000030},
	{EMIF1_INDEX, OMAP44XX_EMIF_PWR_MGMT_CTRL_SHDW, 1, 0x00000034},
	{EMIF1_INDEX, OMAP44XX_EMIF_OCP_CONFIG, 1, 0x00000038},
	{EMIF1_INDEX, OMAP44XX_EMIF_PERF_CNT_CFG, 1, 0x0000003C},
	{EMIF1_INDEX, OMAP44XX_EMIF_PERF_CNT_SEL, 1, 0x00000040},
	{EMIF1_INDEX, OMAP44XX_EMIF_READ_IDLE_CTRL, 1, 0x00000044},
	{EMIF1_INDEX, OMAP44XX_EMIF_READ_IDLE_CTRL_SHDW, 1, 0x00000048},
	{EMIF1_INDEX, OMAP44XX_EMIF_IRQENABLE_SET_SYS, 1, 0x0000004C},
	{EMIF1_INDEX, OMAP44XX_EMIF_IRQENABLE_SET_LL, 1, 0x00000050},
	{EMIF1_INDEX, OMAP44XX_EMIF_ZQ_CONFIG, 1, 0x00000054},
	{EMIF1_INDEX, OMAP44XX_EMIF_TEMP_ALERT_CONFIG, 1, 0x00000058},
	{EMIF1_INDEX, OMAP44XX_EMIF_DDR_PHY_CTRL_1, 1, 0x0000005C},
	{EMIF1_INDEX, OMAP44XX_EMIF_DDR_PHY_CTRL_1_SHDW, 1, 0x00000060},
	{EMIF1_INDEX, OMAP44XX_EMIF_DDR_PHY_CTRL_2, 1, 0x00000064},
	{EMIF2_INDEX, OMAP44XX_EMIF_SDRAM_CONFIG, 1, 0x00000068},
	{EMIF2_INDEX, OMAP44XX_EMIF_SDRAM_CONFIG_2, 1, 0x0000006C},
	{EMIF2_INDEX, OMAP44XX_EMIF_SDRAM_REF_CTRL, 1, 0x00000070},
	{EMIF2_INDEX, OMAP44XX_EMIF_SDRAM_REF_CTRL_SHDW, 1, 0x00000074},
	{EMIF2_INDEX, OMAP44XX_EMIF_SDRAM_TIM_1, 1, 0x00000078},
	{EMIF2_INDEX, OMAP44XX_EMIF_SDRAM_TIM_1_SHDW, 1, 0x0000007C},
	{EMIF2_INDEX, OMAP44XX_EMIF_SDRAM_TIM_2, 1, 0x00000080},
	{EMIF2_INDEX, OMAP44XX_EMIF_SDRAM_TIM_2_SHDW, 1, 0x00000084},
	{EMIF2_INDEX, OMAP44XX_EMIF_SDRAM_TIM_3, 1, 0x00000088},
	{EMIF2_INDEX, OMAP44XX_EMIF_SDRAM_TIM_3_SHDW, 1, 0x0000008C},
	{EMIF2_INDEX, OMAP44XX_EMIF_LPDDR2_NVM_TIM, 1, 0x00000090},
	{EMIF2_INDEX, OMAP44XX_EMIF_LPDDR2_NVM_TIM_SHDW, 1, 0x00000094},
	{EMIF2_INDEX, OMAP44XX_EMIF_PWR_MGMT_CTRL, 1, 0x00000098},
	{EMIF2_INDEX, OMAP44XX_EMIF_PWR_MGMT_CTRL_SHDW, 1, 0x0000009C},
	{EMIF2_INDEX, OMAP44XX_EMIF_OCP_CONFIG, 1, 0x000000A0},
	{EMIF2_INDEX, OMAP44XX_EMIF_PERF_CNT_CFG, 1, 0x000000A4},
	{EMIF2_INDEX, OMAP44XX_EMIF_PERF_CNT_SEL, 1, 0x000000A8},
	{EMIF2_INDEX, OMAP44XX_EMIF_READ_IDLE_CTRL, 1, 0x000000AC},
	{EMIF2_INDEX, OMAP44XX_EMIF_READ_IDLE_CTRL_SHDW, 1, 0x000000B0},
	{EMIF2_INDEX, OMAP44XX_EMIF_IRQENABLE_SET_SYS, 1, 0x000000B4},
	{EMIF2_INDEX, OMAP44XX_EMIF_IRQENABLE_SET_LL, 1, 0x000000B8},
	{EMIF2_INDEX, OMAP44XX_EMIF_ZQ_CONFIG, 1, 0x000000BC},
	{EMIF2_INDEX, OMAP44XX_EMIF_TEMP_ALERT_CONFIG, 1, 0x000000C0},
	{EMIF2_INDEX, OMAP44XX_EMIF_DDR_PHY_CTRL_1, 1, 0x000000C4},
	{EMIF2_INDEX, OMAP44XX_EMIF_DDR_PHY_CTRL_1_SHDW, 1, 0x000000C8},
	{EMIF2_INDEX, OMAP44XX_EMIF_DDR_PHY_CTRL_2, 1, 0x000000CC},
	{CM2_INDEX, ((OMAP4430_CM2_RESTORE_MOD) & MOD_MASK) +
		OMAP4_CM_MEMIF_CLKSTCTRL_RESTORE_OFFSET, 1, 0x000000D0},
	{CM1_INDEX, ((OMAP4430_CM1_RESTORE_MOD) & MOD_MASK) +
		OMAP4_CM_CLKSEL_CORE_RESTORE_OFFSET, 1, 0x000000D4},
	{CM1_INDEX, ((OMAP4430_CM1_RESTORE_MOD) & MOD_MASK) +
		OMAP4_CM_DIV_M2_DPLL_CORE_RESTORE_OFFSET, 1, 0x000000D8},
	{CM1_INDEX, ((OMAP4430_CM1_RESTORE_MOD) & MOD_MASK) +
		OMAP4_CM_DIV_M3_DPLL_CORE_RESTORE_OFFSET, 1, 0x000000DC},
	{CM1_INDEX, ((OMAP4430_CM1_RESTORE_MOD) & MOD_MASK) +
		OMAP4_CM_DIV_M4_DPLL_CORE_RESTORE_OFFSET, 1, 0x000000E0},
	{CM1_INDEX, ((OMAP4430_CM1_RESTORE_MOD) & MOD_MASK) +
		OMAP4_CM_DIV_M5_DPLL_CORE_RESTORE_OFFSET, 1, 0x000000E4},
	{CM1_INDEX, ((OMAP4430_CM1_RESTORE_MOD) & MOD_MASK) +
		OMAP4_CM_DIV_M6_DPLL_CORE_RESTORE_OFFSET, 1, 0x000000E8},
	{CM1_INDEX, ((OMAP4430_CM1_RESTORE_MOD) & MOD_MASK) +
		OMAP4_CM_DIV_M7_DPLL_CORE_RESTORE_OFFSET, 1, 0x000000EC},
	{CM1_INDEX, ((OMAP4430_CM1_RESTORE_MOD) & MOD_MASK) +
		OMAP4_CM_CLKSEL_DPLL_CORE_RESTORE_OFFSET, 1, 0x000000F0},
	{CM1_INDEX, ((OMAP4430_CM1_RESTORE_MOD) & MOD_MASK) +
	OMAP4_CM_SSC_DELTAMSTEP_DPLL_CORE_RESTORE_OFFSET, 1, 0x000000F4},
	{CM1_INDEX, ((OMAP4430_CM1_RESTORE_MOD) & MOD_MASK) +
	OMAP4_CM_SSC_MODFREQDIV_DPLL_CORE_RESTORE_OFFSET, 1, 0x000000F8},
	{CM1_INDEX, ((OMAP4430_CM1_RESTORE_MOD) & MOD_MASK) +
		OMAP4_CM_CLKMODE_DPLL_CORE_RESTORE_OFFSET, 1, 0x000000FC},
	{CM1_INDEX, ((OMAP4430_CM1_RESTORE_MOD) & MOD_MASK) +
		OMAP4_CM_SHADOW_FREQ_CONFIG2_RESTORE_OFFSET, 1, 0x00000100},
	{CM1_INDEX, ((OMAP4430_CM1_RESTORE_MOD) & MOD_MASK) +
		OMAP4_CM_SHADOW_FREQ_CONFIG1_RESTORE_OFFSET, 1, 0x00000104},
	{CM1_INDEX, ((OMAP4430_CM1_RESTORE_MOD) & MOD_MASK)  +
		OMAP4_CM_AUTOIDLE_DPLL_CORE_RESTORE_OFFSET, 1, 0x00000108},
	{CM1_INDEX, ((OMAP4430_CM1_RESTORE_MOD) & MOD_MASK) +
		OMAP4_CM_MPU_CLKSTCTRL_RESTORE_OFFSET, 1, 0x0000010C},
	{CM1_INDEX, ((OMAP4430_CM1_RESTORE_MOD) & MOD_MASK)  +
		OMAP4_CM_CM1_PROFILING_CLKCTRL_RESTORE_OFFSET, 1, 0x00000110},
	{CM1_INDEX, ((OMAP4430_CM1_RESTORE_MOD) & MOD_MASK) +
		OMAP4_CM_DYN_DEP_PRESCAL_RESTORE_OFFSET, 1, 0x00000114},
	{CM2_INDEX, ((OMAP4430_CM2_RESTORE_MOD) & MOD_MASK) +
		OMAP4_CM_L3_1_CLKSTCTRL_RESTORE_OFFSET,	1, 0x00000118},
	{CM2_INDEX, ((OMAP4430_CM2_RESTORE_MOD) & MOD_MASK) +
		OMAP4_CM_L3_2_CLKSTCTRL_RESTORE_OFFSET, 1, 0x0000011C},
	{CM2_INDEX, ((OMAP4430_CM2_RESTORE_MOD) & MOD_MASK) +
		OMAP4_CM_L4CFG_CLKSTCTRL_RESTORE_OFFSET, 1, 0x00000120},
	{CM2_INDEX, ((OMAP4430_CM2_RESTORE_MOD) & MOD_MASK) +
		OMAP4_CM_MEMIF_CLKSTCTRL_RESTORE_OFFSET, 1, 0x00000124},
	{CM2_INDEX, ((OMAP4430_CM2_RESTORE_MOD) & MOD_MASK) +
		OMAP4_CM_L3INIT_CLKSTCTRL_RESTORE_OFFSET, 1, 0x00000128},
	{CM2_INDEX, ((OMAP4430_CM2_RESTORE_MOD) & MOD_MASK) +
		OMAP4_CM_L4PER_CLKSTCTRL_RESTORE_OFFSET, 1, 0x0000012C},
	{CM2_INDEX, ((OMAP4430_CM2_RESTORE_MOD) & MOD_MASK) +
		OMAP4_CM_L3INSTR_L3_3_CLKCTRL_RESTORE_OFFSET, 1, 0x00000130},
	{CM2_INDEX, ((OMAP4430_CM2_RESTORE_MOD) & MOD_MASK) +
	OMAP4_CM_L3INSTR_L3_INSTR_CLKCTRL_RESTORE_OFFSET, 1, 0x00000134},
	{CM2_INDEX, ((OMAP4430_CM2_RESTORE_MOD) & MOD_MASK) +
		OMAP4_CM_L3INSTR_OCP_WP1_CLKCTRL_RESTORE_OFFSET, 1, 0x00000138},
	{CM2_INDEX, ((OMAP4430_CM2_RESTORE_MOD) & MOD_MASK) +
		OMAP4_CM_CM2_PROFILING_CLKCTRL_RESTORE_OFFSET, 1, 0x0000013C},
	{CM2_INDEX, ((OMAP4430_CM2_RESTORE_MOD) & MOD_MASK) +
		OMAP4_CM_D2D_STATICDEP_RESTORE_OFFSET, 1, 0x00000140},
	{CM2_INDEX, ((OMAP4430_CM2_RESTORE_MOD) & MOD_MASK) +
		OMAP4_CM_L3_1_DYNAMICDEP_RESTORE_OFFSET, 1, 0x00000144},
	{CM2_INDEX, ((OMAP4430_CM2_RESTORE_MOD) & MOD_MASK) +
		OMAP4_CM_L3_2_DYNAMICDEP_RESTORE_OFFSET, 1, 0x00000148},
	{CM2_INDEX, ((OMAP4430_CM2_RESTORE_MOD) & MOD_MASK) +
		OMAP4_CM_D2D_DYNAMICDEP_RESTORE_OFFSET, 1, 0x0000014C},
	{CM2_INDEX, ((OMAP4430_CM2_RESTORE_MOD) & MOD_MASK) +
		OMAP4_CM_L4CFG_DYNAMICDEP_RESTORE_OFFSET, 1, 0x00000150},
	{CM2_INDEX, ((OMAP4430_CM2_RESTORE_MOD) & MOD_MASK) +
		OMAP4_CM_L4PER_DYNAMICDEP_RESTORE_OFFSET, 1, 0x00000154},
	{C2C_INDEX,  0x0C, 1, 0x00000158},
	{C2C_INDEX,  0x10, 1, 0x0000015C},
	{C2C_INDEX,  0x28, 1, 0x00000160},
	{C2C_INDEX,  0x40, 1, 0x00000164},
	{C2C_INDEX,  0x44, 1, 0x00000168},
	{C2C_INDEX,  0x70, 1, 0x0000016C},
	{C2C_INDEX,  0x74, 1, 0x00000170},
	{C2C_INDEX,  0x84, 1, 0x00000174},
	{C2C_INDEX,  0x88, 1, 0x00000178},
	{CTRL_MODULE_PAD_CORE_INDEX,
	 OMAP4_CTRL_MODULE_PAD_CORE_CONTROL_PADCONF_GLOBAL, 15, 0x0000017C},
	{CTRL_MODULE_PAD_CORE_INDEX,
	 OMAP4_CTRL_MODULE_PAD_CORE_CONTROL_PBIASLITE, 14, 0x000001B8},
	{CTRL_MODULE_PAD_CORE_INDEX,
	 OMAP4_CTRL_MODULE_PAD_CORE_CONTROL_LPDDR2IO1_0, 14, 0x000001F0},
	{CTRL_MODULE_PAD_CORE_INDEX,
	 OMAP4_CTRL_MODULE_PAD_CORE_CONTROL_BUS_HOLD, 1, 0x00000210},
	{CTRL_MODULE_PAD_CORE_INDEX,
	 OMAP4_CTRL_MODULE_PAD_CORE_CONTROL_C2C, 1, 0x00000214},
	{CTRL_MODULE_PAD_CORE_INDEX,
	 OMAP4_CTRL_MODULE_PAD_CORE_CONTROL_EFUSE_1, 1, 0x00000218},
	{CTRL_MODULE_PAD_CORE_INDEX,
	 OMAP4_CTRL_MODULE_PAD_CORE_CONTROL_EFUSE_2, 1, 0x0000021C},
	{CTRL_MODULE_PAD_CORE_INDEX,
	 OMAP4_CTRL_MODULE_PAD_CORE_CONTROL_EFUSE_4, 1, 0x00000220},
	{DMM_INDEX, OMAP44XX_DMM_LISA_MAP, 4, 0x000000224},
	{DMM_INDEX, OMAP44XX_DMM_LISA_LOCK, 1, 0x00000234},
	{DMM_INDEX, OMAP44XX_DMM_TILER_OR, 2, 0x00000238},
	{DMM_INDEX, OMAP44XX_DMM_PAT_VIEW, 2, 0x00000240},
	{DMM_INDEX, OMAP44XX_DMM_PAT_VIEW_MAP, 4, 0x00000248},
	{DMM_INDEX, OMAP44XX_DMM_PAT_VIEW_MAP_BASE, 1, 0x00000258},
	{DMM_INDEX, OMAP44XX_DMM_PAT_IRQENABLE_SET, 1, 0x0000025C},
	{DMM_INDEX, OMAP44XX_DMM_PAT_DESCR, 1, 0x00000260},
	{DMM_INDEX, OMAP44XX_DMM_PAT_AREA, 1, 0x00000264},
	{DMM_INDEX, OMAP44XX_DMM_PAT_CTRL, 1, 0x00000268},
	{DMM_INDEX, OMAP44XX_DMM_PAT_DATA, 1, 0x0000026C},
	{DMM_INDEX, OMAP44XX_DMM_PAT_DESCR + 0x10, 1, 0x00000270},
	{DMM_INDEX, OMAP44XX_DMM_PAT_AREA + 0x10, 1, 0x00000274},
	{DMM_INDEX, OMAP44XX_DMM_PAT_CTRL + 0x10, 1, 0x00000278},
	{DMM_INDEX, OMAP44XX_DMM_PAT_DATA + 0x10, 1, 0x0000027C},
	{DMM_INDEX, OMAP44XX_DMM_PAT_DESCR + 0x20, 1, 0x00000280},
	{DMM_INDEX, OMAP44XX_DMM_PAT_AREA + 0x20, 1, 0x00000284},
	{DMM_INDEX, OMAP44XX_DMM_PAT_CTRL + 0x20, 1, 0x00000288},
	{DMM_INDEX, OMAP44XX_DMM_PAT_DATA + 0x20, 1, 0x0000028C},
	{DMM_INDEX, OMAP44XX_DMM_PAT_DESCR + 0x30, 1, 0x00000290},
	{DMM_INDEX, OMAP44XX_DMM_PAT_AREA + 0x30, 1, 0x00000294},
	{DMM_INDEX, OMAP44XX_DMM_PAT_CTRL + 0x30, 1, 0x00000298},
	{DMM_INDEX, OMAP44XX_DMM_PAT_DATA + 0x30, 1, 0x0000029C},
	{DMM_INDEX, OMAP44XX_DMM_PEG_PRIO, 2, 0x000002A0},
	{DMM_INDEX, OMAP44XX_DMM_PEG_PRIO_PAT, 1, 0x000002A8},
	{L3_CLK1_INDEX, 0x508, 1, 0x000002AC},
	{L3_CLK1_INDEX, 0x510, 1, 0x000002B0},
	{L3_CLK1_INDEX, 0x708, 1, 0x000002B4},
	{L3_CLK1_INDEX, 0x70C, 1, 0x000002B8},
	{L3_CLK1_INDEX, 0x808, 1, 0x000002BC},
	{L3_CLK2_INDEX, 0x1008, 1, 0x000002C0},
	{L3_CLK2_INDEX, 0x1010, 1, 0x000002C4},
	{L3_CLK2_INDEX, 0x1208, 1, 0x000002C8},
	{L3_CLK2_INDEX, 0x1308, 1, 0x000002CC},
	{L3_CLK2_INDEX, 0x130C, 1, 0x000002D0},
	{L3_CLK2_INDEX, 0x1408, 1, 0x000002D4},
	{L3_CLK2_INDEX, 0x140C, 1, 0x000002D8},
	{L3_CLK2_INDEX, 0x1508, 1, 0x000002DC},
	{L3_CLK2_INDEX, 0x150C, 1, 0x000002E0},
	{L3_CLK3_INDEX, 0x208, 1, 0x000002E4},
	{L3_CLK3_INDEX, 0x210, 1, 0x000002E8},
	{CM2_INDEX, ((OMAP4430_CM2_RESTORE_MOD) & MOD_MASK) +
	OMAP4_CM_L3INIT_USB_HOST_CLKCTRL_RESTORE_OFFSET, 1, 0x000002EC},
	{CM2_INDEX, ((OMAP4430_CM2_RESTORE_MOD) & MOD_MASK) +
	OMAP4_CM_L3INIT_USB_TLL_CLKCTRL_RESTORE_OFFSET, 1, 0x000002F0},
	{CM2_INDEX, ((OMAP4430_CM2_RESTORE_MOD) & MOD_MASK) +
		OMAP4_CM_SDMA_STATICDEP_RESTORE_OFFSET, 1, 0x000002F4},
	{USBTLL_INDEX, 0x400, 7, 0x000002F8},
	{UHH_INDEX, 0x10, 1, 0x00000314},
	{UHH_INDEX, 0x40, 1, 0x00000318},
	{UHH_INDEX, 0x100, 384, 0x0000031C},
	{CM2_INDEX, ((OMAP4430_CM2_RESTORE_MOD) & MOD_MASK) +
	OMAP4_CM_L3INIT_USB_HOST_CLKCTRL_RESTORE_OFFSET, 1, 0x0000091C},
	{CM2_INDEX, ((OMAP4430_CM2_RESTORE_MOD) & MOD_MASK) +
	OMAP4_CM_L3INIT_USB_TLL_CLKCTRL_RESTORE_OFFSET, 1, 0x00000920},
	{CM2_INDEX, ((OMAP4430_CM2_RESTORE_MOD) & MOD_MASK) +
		OMAP4_CM_SDMA_STATICDEP_RESTORE_OFFSET, 1, 0x00000924},
};

/*
 * SAR_RAM2 register layout consist of SYSCTRL_PADCONF_CORE regsiters
 */
const u32 sar_ram2_layout[NB_REGS_CONST_SETS_RAM2_HW][4] = {
	{CTRL_MODULE_PAD_CORE_INDEX, 0x40, 102, 0x00000000},
};

/*
 * SAR_RAM3 and  SAR_RAM4 layout is not listed since moslty it's handle by
 * secure software.
 */
const u32 sar_ram3_layout[NB_REGS_CONST_SETS_RAM3_HW][4] = {
	{L4CORE_INDEX, 0x2140, 1, 0x00000000},
	{L4CORE_INDEX, 0x2104, 1, 0x00000004},
	{L4CORE_INDEX, 0x2100, 1, 0x00000008},
	{L4CORE_INDEX, 0x2108, 1, 0x0000000C},
	{L4CORE_INDEX, 0x210C, 1, 0x00000010},
	{L4CORE_INDEX, 0x2110, 1, 0x00000014},
	{L4CORE_INDEX, 0x2114, 1, 0x00000018},
	{L4CORE_INDEX, 0x204088, 14, 0x0000001C},
	{L4CORE_INDEX, 0x206088, 2, 0x00000054},
	{L4CORE_INDEX, 0x20C088, 30, 0x0000005C},
	{L4CORE_INDEX, 0x210088, 30, 0x000000D4},
	{L4CORE_INDEX, 0x212088, 38, 0x0000014C},
	{L4CORE_INDEX, 0x214088, 2, 0x000001E4},
	{L4CORE_INDEX, 0x216088, 2, 0x000001EC},
	{L4CORE_INDEX, 0x218088, 2, 0x000001F4},
	{L4CORE_INDEX, 0x21C088, 2, 0x000001FC},
	{L4CORE_INDEX, 0x21E088, 2, 0x00000204},
	{L4CORE_INDEX, 0x220088, 2, 0x0000020C},
	{L4CORE_INDEX, 0x226088, 6, 0x00000214},
	{L4CORE_INDEX, 0x228088, 2, 0x0000022C},
	{L4CORE_INDEX, 0x22A088, 14, 0x00000234},
	{L4PER_INDEX, 0x218, 1, 0x0000026C},
	{L4PER_INDEX, 0x220, 1, 0x00000270},
	{L4PER_INDEX, 0x228, 1, 0x00000274},
	{L4PER_INDEX, 0x230, 1, 0x00000278},
	{L4PER_INDEX, 0x238, 1, 0x0000027C},
	{L4PER_INDEX, 0x298, 2, 0x00000280},
	{L4PER_INDEX, 0x2A0, 2, 0x00000288},
	{L4PER_INDEX, 0x2A8, 2, 0x00000290},
	{L4PER_INDEX, 0x2B0, 2, 0x00000298},
	{L4PER_INDEX, 0x2B8, 2, 0x000002A0},
	{L4PER_INDEX, 0x304, 1, 0x000002A8},
	{L4PER_INDEX, 0x31C, 1, 0x000002AC},
	{L4PER_INDEX, 0x32C, 1, 0x000002B0},
	{L4PER_INDEX, 0x33C, 1, 0x000002B4},
	{L4PER_INDEX, 0x34C, 1, 0x000002B8},
	{L4PER_INDEX, 0x35C, 1, 0x000002BC},
	{L4PER_INDEX, 0x36C, 1, 0x000002C0},
	{L4PER_INDEX, 0x37C, 1, 0x000002C4},
	{L4PER_INDEX, 0x38C, 1, 0x000002C8},
	{L4PER_INDEX, 0x39C, 1, 0x000002CC},
	{L4PER_INDEX, 0x3AC, 1, 0x000002D0},
	{L4PER_INDEX, 0x3BC, 1, 0x000002D4},
	{L4PER_INDEX, 0x3CC, 1, 0x000002D8},
	{L4PER_INDEX, 0x3D4, 1, 0x000002DC},
	{L4PER_INDEX, 0x3E4, 1, 0x000002E0},
	{L4PER_INDEX, 0x3F4, 1, 0x000002E4},
	{L4PER_INDEX, 0x404, 1, 0x000002E8},
	{L4PER_INDEX, 0x414, 1, 0x000002EC},
	{L4PER_INDEX, 0x42C, 1, 0x000002F0},
	{L4PER_INDEX, 0x43C, 1, 0x000002F4},
	{L4PER_INDEX, 0x44C, 1, 0x000002F8},
	{L4PER_INDEX, 0x45C, 1, 0x000002FC},
	{L4PER_INDEX, 0x46C, 1, 0x00000300},
	{L4PER_INDEX, 0x47C, 1, 0x00000304},
	{L4PER_INDEX, 0x48C, 1, 0x00000308},
	{L4PER_INDEX, 0x49C, 1, 0x0000030C},
	{L4PER_INDEX, 0x4AC, 1, 0x00000310},
	{L4PER_INDEX, 0x4BC, 1, 0x00000314},
	{L4PER_INDEX, 0x4CC, 1, 0x00000318},
	{L4PER_INDEX, 0x4DC, 1, 0x0000031C},
	{L4PER_INDEX, 0x4EC, 1, 0x00000320},
	{L4PER_INDEX, 0x4FC, 1, 0x00000324},
	{L4PER_INDEX, 0x50C, 1, 0x00000328},
	{L4PER_INDEX, 0x51C, 1, 0x0000032C},
	{L4PER_INDEX, 0x52C, 1, 0x00000330},
	{L4PER_INDEX, 0x53C, 1, 0x00000334},
	{L4PER_INDEX, 0x54C, 1, 0x00000338},
	{L4PER_INDEX, 0x55C, 1, 0x0000033C},
	{L4PER_INDEX, 0x56C, 1, 0x00000340},
	{L4PER_INDEX, 0x57C, 1, 0x00000344},
	{L4PER_INDEX, 0x5A4, 1, 0x00000348},
	{L4CORE_INDEX, 0x230, 1, 0x0000034C},
	{L4CORE_INDEX, 0x238, 1, 0x00000350},
	{L4CORE_INDEX, 0x2B0, 2, 0x00000354},
	{L4CORE_INDEX, 0x2B8, 2, 0x0000035C},
	{L4CORE_INDEX, 0x304, 1, 0x00000364},
	{L4CORE_INDEX, 0x31C, 1, 0x00000368},
	{L4CORE_INDEX, 0x32C, 1, 0x0000036C},
	{L4CORE_INDEX, 0x33C, 1, 0x00000370},
	{L4CORE_INDEX, 0x354, 1, 0x00000374},
	{L4CORE_INDEX, 0x35C, 1, 0x00000378},
	{L4CORE_INDEX, 0x36C, 1, 0x0000037C},
	{L4CORE_INDEX, 0x37C, 1, 0x00000380},
	{L4CORE_INDEX, 0x38C, 1, 0x00000384},
	{L4CORE_INDEX, 0x3AC, 1, 0x00000388},
	{L4CORE_INDEX, 0x3BC, 1, 0x0000038C},
	{L4CORE_INDEX, 0x3CC, 1, 0x00000390},
	{L4CORE_INDEX, 0x3DC, 1, 0x00000394},
	{L4CORE_INDEX, 0x3EC, 1, 0x00000398},
	{L4CORE_INDEX, 0x3FC, 1, 0x0000039C},
	{L4CORE_INDEX, 0x40C, 1, 0x000003A0},
	{L4CORE_INDEX, 0x41C, 1, 0x000003A4},
	{L4CORE_INDEX, 0x42C, 1, 0x000003A8},
	{L4CORE_INDEX, 0x43C, 1, 0x000003AC},
	{L4CORE_INDEX, 0x44C, 1, 0x000003B0},
	{L4CORE_INDEX, 0x45C, 1, 0x000003B4},
	{L4CORE_INDEX, 0x46C, 1, 0x000003B8},
	{L4CORE_INDEX, 0x47C, 1, 0x000003BC},
	{L4CORE_INDEX, 0x48C, 1, 0x000003C0},
	{L4CORE_INDEX, 0x49C, 1, 0x000003C4},
	{L4CORE_INDEX, 0x4AC, 1, 0x000003C8},
	{L4CORE_INDEX, 0x4BC, 1, 0x000003CC},
	{L4CORE_INDEX, 0x4CC, 1, 0x000003D0},
	{L4CORE_INDEX, 0x4DC, 1, 0x000003D4},
	{L4CORE_INDEX, 0x4EC, 1, 0x000003D8},
	{L4CORE_INDEX, 0x4FC, 1, 0x000003DC},
	{L4CORE_INDEX, 0x50C, 1, 0x000003E0},
	{L4CORE_INDEX, 0x51C, 1, 0x000003E4},
	{L4CORE_INDEX, 0x52C, 1, 0x000003E8},
	{L4CORE_INDEX, 0x53C, 1, 0x000003EC},
	{L4CORE_INDEX, 0x54C, 1, 0x000003F0},
	{L4CORE_INDEX, 0x55C, 1, 0x000003F4},
	{L4CORE_INDEX, 0x56C, 1, 0x000003F8},
	{L4CORE_INDEX, 0x574, 1, 0x000003FC},
	{L4CORE_INDEX, 0x584, 1, 0x00000400},
	{L4CORE_INDEX, 0x594, 1, 0x00000404},
	{L4CORE_INDEX, 0x5A4, 1, 0x00000408},
	{L4CORE_INDEX, 0x5B4, 1, 0x0000040C},
	{L4CORE_INDEX, 0x5C4, 1, 0x00000410},
	{L4CORE_INDEX, 0x5D4, 1, 0x00000414},
	{L4CORE_INDEX, 0x5DC, 1, 0x00000418},
};

#endif
