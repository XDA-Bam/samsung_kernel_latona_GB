#!/sbin/ext/busybox sh

TWEAK_BASE="persist.tweak";

TWEAK_IO="$TWEAK_BASE.ioscheduler";				# I/O: Scheduler
TWEAK_NOATIME="$TWEAK_BASE.noatime";				# Network Tweaks
TWEAK_VM_SWAPPINESS="$TWEAK_BASE.vm.swappiness";		# VM: Swappiness
TWEAK_VM_DIRTY="$TWEAK_BASE.vm.dirty";				# Ram Script
TWEAK_SCHEDULER="$TWEAK_BASE.scheduler";			# Kernel Scheduler
TWEAK_MINFREE="$TWEAK_BASE.minfree";				# RAM: Min-free
TWEAK_SDCARD="$TWEAK_BASE.sdcard";				# SD: Speed tweak
TWEAK_STAGEFRIGHT="$TWEAK_BASE.stagefright";			# Auto ZipAlign
TWEAK_GOVERNOR_CONSERVATIVE="$TWEAK_BASE.gov_conservative";	# EXT4 Speed
TWEAK_SCHEDULER_DEADLINE="$TWEAK_BASE.sched_deadline";		# I/O: Deadline sched.
TWEAK_TOUCHSCREEN="$TWEAK_BASE.touchscreen";			# Optimize SQLite databases

for i in $TWEAK_IO $TWEAK_MINFREE $TWEAK_SDCARD $TWEAK_GOVERNOR_CONSERVATIVE; do
  if [ "$(getprop $i)" = "" ]; then
    setprop $i enabled;
  fi;
done;

for i in $TWEAK_NOATIME $TWEAK_SCHEDULER $TWEAK_VM_SWAPPINESS $TWEAK_VM_DIRTY $TWEAK_STAGEFRIGHT $TWEAK_SCHEDULER_DEADLINE $TWEAK_TOUCHSCREEN; do
  if [ "$(getprop $i)" = "" ]; then
    setprop $i disabled;
  fi;
done;

if [ $(getprop $TWEAK_IO) = "enabled" ]; then
  # Tweak cfq io scheduler
  for i in $(ls -d /sys/block/stl*) $(ls -d /sys/block/mmc*)
  do 
    echo "0" > $i/queue/rotational
    echo "1" > $i/queue/iosched/low_latency
    echo "1" > $i/queue/iosched/back_seek_penalty
    echo "1000000000" > $i/queue/iosched/back_seek_max
    echo "2" > $i/queue/iosched/slice_idle
    echo "3072" > $i/queue/read_ahead_kb
    echo "2048" > $i/queue/nr_requests
  done
fi;

if [ $(getprop $TWEAK_SCHEDULER_DEADLINE) = "enabled" ]; then
  # use deadline scheduler
  for i in $(ls -d /sys/block/stl*) $(ls -d /sys/block/mmc*)
  do 
    echo "deadline" > $i/queue/scheduler
    echo "8" > $i/queue/iosched/fifo_batch
    echo "16" > $i/queue/iosched/quantum
    echo "400" > $i/queue/iosched/read_expire
    echo "4" > $i/queue/iosched/writes_starved
  done
fi;

if [ $(getprop $TWEAK_NOATIME) = "enabled" ]; then
  echo "0" > /proc/sys/net/ipv4/tcp_timestamps;
  echo "1" > /proc/sys/net/ipv4/tcp_tw_reuse;
  echo "1" > /proc/sys/net/ipv4/tcp_sack;
  echo "1" > /proc/sys/net/ipv4/tcp_tw_recycle;
  echo "1" > /proc/sys/net/ipv4/tcp_window_scaling;
  echo "5" > /proc/sys/net/ipv4/tcp_keepalive_probes;
  echo "30" > /proc/sys/net/ipv4/tcp_keepalive_intvl;
  echo "30" > /proc/sys/net/ipv4/tcp_fin_timeout;
  echo "404480" > /proc/sys/net/core/wmem_max;
  echo "404480" > /proc/sys/net/core/rmem_max;
  echo "256960" > /proc/sys/net/core/rmem_default;
  echo "256960" > /proc/sys/net/core/wmem_default;
  echo "4096 16384 404480" > /proc/sys/net/ipv4/tcp_wmem;
  echo "4096 87380 404480" > /proc/sys/net/ipv4/tcp_rmem;
fi;

if [ $(getprop $TWEAK_SDCARD) = "enabled" ]; then
  # SDcard speed tweak
  for i in $(ls -1 /sys/devices/platform/mmci-omap-hs.*/mmc_host/mmc*/mmc*/block/*/queue/read_ahead_kb); do 
    echo 3072 > $i; 
  done;
fi;

if [ $(getprop $TWEAK_VM_SWAPPINESS) = "enabled" ]; then
  # Tweak kernel VM management
  echo "0" > /proc/sys/vm/swappiness
fi;

if [ $(getprop $TWEAK_VM_DIRTY) = "enabled" ]; then
  # Miscellaneous tweaks
  echo "1000" > /proc/sys/vm/dirty_writeback_centisecs;
  echo "500" > /proc/sys/vm/dirty_expire_centisecs;
  echo "10" > /proc/sys/vm/dirty_ratio;
  echo "2" > /proc/sys/vm/dirty_background_ratio;
  echo "4096" > /proc/sys/vm/min_free_kbytes;
  echo "70" > /proc/sys/vm/vfs_cache_pressure;
fi;

if [ $(getprop $TWEAK_SCHEDULER) = "enabled" ]; then
  # Tweak kernel scheduler, less aggressive settings
  echo "20000000" > /proc/sys/kernel/sched_latency_ns;
  echo "2500000" > /proc/sys/kernel/sched_wakeup_granularity_ns;
  echo "1000000" > /proc/sys/kernel/sched_min_granularity_ns;
fi;

if [ $(getprop $TWEAK_MINFREE) = "enabled" ]; then
  if [ -e /sys/module/lowmemorykiller/parameters/adj ]; then
    echo "0,1,2,4,7,15" > /sys/module/lowmemorykiller/parameters/adj
  fi
  if [ -e /sys/module/lowmemorykiller/parameters/minfree ]; then
    echo "2560,4096,6144,12288,14336,18432" > /sys/module/lowmemorykiller/parameters/minfree
  fi;
fi;

if [ $(getprop $TWEAK_STAGEFRIGHT) = "enabled" ]; then
  LOG_FILE=/data/zipalign.log
  ZIPALIGNDB=/data/zipalign.db

  if [ -e $LOG_FILE ]; then
    rm $LOG_FILE;
  fi;

  if [ ! -f $ZIPALIGNDB ]; then
    touch $ZIPALIGNDB;
  fi;

  echo "Starting FV Automatic ZipAlign $( date +"%m-%d-%Y %H:%M:%S" )" | tee -a $LOG_FILE
  busybox mount -o rw,remount /system

  for DIR in /system/app /data/app ; do
    cd $DIR
    for APK in *.apk ; do
    if [ $APK -ot $ZIPALIGNDB ] && [ $(grep "$DIR/$APK" $ZIPALIGNDB|wc -l) -gt 0 ] ; then
      echo "Already checked: $DIR/$APK" | tee -a $LOG_FILE
    else
      zipalign -c 4 $APK
      if [ $? -eq 0 ] ; then
      echo "Already aligned: $DIR/$APK" | tee -a $LOG_FILE
      grep "$DIR/$APK" $ZIPALIGNDB > /dev/null || echo $DIR/$APK >> $ZIPALIGNDB
      else
      echo "Now aligning: $DIR/$APK" | tee -a $LOG_FILE
      zipalign -f 4 $APK /cache/$APK
      cp -f -p /cache/$APK $APK
      busybox rm -f /cache/$APK
      grep "$DIR/$APK" $ZIPALIGNDB > /dev/null || echo $DIR/$APK >> $ZIPALIGNDB
      fi
    fi
    done
  done

  busybox mount -o ro,remount /system
  echo "Automatic ZipAlign finished at $( date +"%m-%d-%Y %H:%M:%S" )" | tee -a $LOG_FILE
fi;

if [ $(getprop $TWEAK_GOVERNOR_CONSERVATIVE) = "enabled" ]; then
	for k in $(busybox mount | grep ext4 | cut -d " " -f3)
	do
		sync;
		if [ "$k" == "/system" ]; then
			busybox mount -o remount,nobh,noatime,commit=20,noauto_da_alloc,barrier=1 $k;
		elif [ "$k" == "/data" ]; then
			busybox mount -o remount,nobh,noatime,commit=20,noauto_da_alloc,barrier=1 $k;
		elif [ "$k" == "/dbdata" -o "$k" == "/datadata" ]; then
			busybox mount -o remount,nobh,noatime,commit=20,noauto_da_alloc,barrier=0,nodelalloc $k;
		elif [ "$k" == "/cache" ]; then
			busybox mount -o remount,nobh,noatime,commit=20,noauto_da_alloc,barrier=1 $k;
		elif [ "$k" == "/data/sdext2" ]; then
			busybox mount -o remount,nobh,noatime,commit=20,noauto_da_alloc,barrier=1 $k;
		fi;
	done
fi;

if [ $(getprop $TWEAK_TOUCHSCREEN) = "enabled" ]; then
  for i in `find /data -iname "*.db"` ; do 
    sqlite3 $i 'VACUUM;'
    sqlite3 $i 'REINDEX;'
  done

  for i in `find /dbdata -iname "*.db"` ; do 
    sqlite3 $i 'VACUUM;'
    sqlite3 $i 'REINDEX;'
  done
fi;
